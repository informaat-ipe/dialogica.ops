#!/usr/bin/env bash
set -e
set -x

source node_modules/dialogica.ops/bin/commonit

cd ${base_dir}

if [ "${1}" == "clean" ]; then
    ${current_dir}/cleanit force
fi

set +x

# Calling npm run build, means that npm (for whatever reason) has set
# the npm_config_depth to null (explicitly).  When npm then calls
# itself in order to do a rebuild this value is read, and npm rebuilds
# wallaby but does not recurse into the submodules, which is not what
# we want.  Setting this to Infinity means that npm rebuild recurses
# correctly.  Now, this script will work correctly whether called
# ./ops/bin/buildit or npm run build

export npm_config_depth=Infinity

while read line; do
    parse_repo_line "${line}"
    if [ "${NAME}x" == "x" ]; then
        continue√∑
    fi

    package_dir=${base_dir}/${NAME}
    if [ -d ${package_dir} ]; then
        echo "--"
        echo "--==  BUILDIT ${NAME}  ==--"
        echo "--"
        set -x
        cd ${package_dir}

        if [ -x ./buildit ]; then
            ./buildit ${1}
        else if [ -f ./package.json ]; then
                if [ -e "${OPS_HOME}/ops/bin/commonit" ]; then
                    source ${OPS_HOME}/ops/bin/commonit
                    ensure_node ${package_dir}
                else
                    NODE_CMD=
                fi
                if [ "${1}" == "clean" ]; then
                    ${NODE_CMD} npm install
                else
                    ${NODE_CMD} npm rebuild
                fi
            else
                echo "nothing to build"
            fi
        fi
        echo "-- BUILDIT done: ${NAME}"
    else
        echo "-- BUILDIT WARNING ${package_dir} does not exist, skipping"
    fi
    set +x

done < ${base_dir}/node_modules/dialogica.ops/etc/modules.txt
